animations = (
  {
    triggers = ["close"];
    opacity = {
      curve = "cubic-bezier(0,0,1,-0.28)";
      duration = .2; 
      start = "window-raw-opacity-before";
      end = 0;
    };
    blur-opacity = "opacity";
    shadow-opacity = "opacity";
    offset-x = "(1 - scale-x) / 2 * window-width";
    offset-y = "(1 - scale-y) / 2 * window-height";
    scale-x = {
      curve = "cubic-bezier(0,0,1,-0.28)";
      duration = .2;
      start = 1;
      end = .5;
    };
    scale-y = "scale-x";
    shadow-scale-x = "scale-x";
    shadow-scale-y = "scale-y";
    shadow-offset-x = "offset-x";
    shadow-offset-y = "offset-y";
  },
  {
    triggers = ["open"];
    opacity = {
      curve = "cubic-bezier(0,1.28,1,1)";
      duration = .2;
      start = 0;
      end = "window-raw-opacity";
    }
    blur-opacity = "opacity";
    shadow-opacity = "opacity";
    offset-x = "(1 - scale-x) / 2 * window-width";
    offset-y = "(1 - scale-y) / 2 * window-height";
    scale-x = {
      curve = "cubic-bezier(0,1.28,1,1)";
      duration = .2;
      start = .5;
      end = 1;
    };
    scale-y = "scale-x";
    shadow-scale-x = "scale-x";
    shadow-scale-y = "scale-y";
    shadow-offset-x = "offset-x";
    shadow-offset-y = "offset-y";
  },
  {
    triggers = ["geometry"]
    scale-x = {
      curve = "cubic-bezier(0,1.28,1,1)";
      duration = 0.22;
      start = "window-width-before / window-width";
      end = 1;
    }
    scale-y = {
      curve = "cubic-bezier(0,1.28,1,1)";
      duration = 0.22;
      start = "window-height-before / window-height";
      end = 1;
    }
    offset-x = {
      curve = "cubic-bezier(0,1.28,1,1)";
      duration = 0.22;
      start = "window-x-before - window-x";
      end = 0;
    }
    offset-y = {
      curve = "cubic-bezier(0,1.28,1,1)";
      duration = 0.22;
      start = "window-y-before - window-y";
      end = 0;
    }

    shadow-scale-x = "scale-x";
    shadow-scale-y = "scale-y";
    shadow-offset-x = "offset-x";
    shadow-offset-y = "offset-y";
  }
)

backend = "egl"
daemon = true
refresh-rate = 144
# See https://github.com/yshui/picom/issues/1438 for why this is set.
vsync = true

window-shader-fg = "dim_and_warm.frag"

# Add this match for easy debugging
#          "focused || "
rules: (
{
  match = "class_g = 'Google-chrome' || "
          "window_type = 'dropdown_menu' || "
          "window_type = 'menu' || "
          "class_g = 'vesktop' || "
          "class_g = 'Thunar' || "
          "class_g = 'com.luckydroid.mementofx.MementoApp' || "
          "class_g = 'steam' || "
          "name = 'MTGA' || "
          "class_g = 'google-chrome' || "
          "name = 'Balatro'";
  # Unfortunately, only one shader can be applied per window, so we need a
  # shader that does double duty here (with copied code :().
  shader = "dim_and_warm.frag";
},
{
  match = "name = 'The Bazaar' || "
          "name = 'VRising' || "
          "name = 'PortalWars2' || "
          "name = 'Battle Brothers 1.5.1.7' || "
          "name = 'syncthingtray-qt6' || "
          "class_g = 'cs2'";
  # Unfortunately, only one shader can be applied per window, so we need a
  # shader that does double duty here (with copied code :().
  shader = "kinda_dim_and_warm.frag";
},
{
  match = "name = 'Dark and Darker  '";
  # No shader
  shader = "noop.frag";
},
{
  match = "class_g = 'kitty' || "
          "class_g = 'Dunst' || "
          "class_g = 'XMenu' || "
          "class_g = 'pavucontrol-qt' || "
          "class_g = 'QDirStat' || "
          "class_g = 'qBittorrent' || "
          "name = 'SimpleScreenRecorder' || "
          "class_g = 'copyq' || "
          # https://docs.qtile.org/en/stable/manual/faq.html#how-can-i-match-the-bar-with-picom
          "QTILE_INTERNAL:32c = 1 || "
          "name = 'qtile_bar' || "
          "class_g = 'Strawberry'";
  opacity = 0.80;
  shader = "warm.frag";
},
)


# A way to dim bright windows only selectively.  Doesn't seem to work :(
# use-damage = false
# max-brightness = 0.001
